{"version":3,"file":"index.cjs.js","sources":["../src/services/chatApi.ts","../src/hooks/useChat.ts","../src/hooks/useTheme.ts","../src/components/ChatHeader.tsx","../src/components/MessageBubble.tsx","../src/components/LoadingIndicator.tsx","../src/components/MessageList.tsx","../src/components/ChatInput.tsx","../src/ChatWidget.tsx"],"sourcesContent":["// src/services/chatApi.ts\r\nimport { ChatApiRequest, ApiChatResponse, StreamChunk } from \"../types\";\r\n\r\nexport class ChatApiService {\r\n  private apiUrl: string;\r\n  private defaultHeaders: HeadersInit;\r\n\r\n  constructor(apiUrl: string) {\r\n    // Remove trailing slash to match your existing API structure\r\n    this.apiUrl = apiUrl.replace(/\\/$/, \"\");\r\n    this.defaultHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n  }\r\n\r\n  // Test connection to the API\r\n  async testConnection(): Promise<{ success: boolean; error?: string }> {\r\n    try {\r\n      const response = await fetch(`${this.apiUrl}/health`, {\r\n        method: \"GET\",\r\n        headers: this.defaultHeaders,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        return {\r\n          success: false,\r\n          error: `Health check failed: ${response.status} ${response.statusText}`,\r\n        };\r\n      }\r\n\r\n      const health = await response.json();\r\n      return {\r\n        success: health.status === \"healthy\" || health.status === \"degraded\",\r\n        error: health.status !== \"healthy\" ? health.error : undefined,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Connection failed\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Send streaming chat message (matches your /api/chat endpoint)\r\n  async sendStreamingMessage(request: ChatApiRequest): Promise<Response> {\r\n    const response = await fetch(`${this.apiUrl}/api/chat`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        ...this.defaultHeaders,\r\n        Accept: \"text/event-stream\",\r\n      },\r\n      body: JSON.stringify({\r\n        ...request,\r\n        stream: true, // Force streaming\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  // Send non-streaming chat message\r\n  async sendMessage(request: ChatApiRequest): Promise<ApiChatResponse> {\r\n    const response = await fetch(`${this.apiUrl}/api/chat`, {\r\n      method: \"POST\",\r\n      headers: this.defaultHeaders,\r\n      body: JSON.stringify({\r\n        ...request,\r\n        stream: false,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  // Process Server-Sent Events stream (matches your streaming format)\r\n  async *processStreamingResponse(\r\n    response: Response\r\n  ): AsyncGenerator<StreamChunk, void, unknown> {\r\n    const reader = response.body?.getReader();\r\n    const decoder = new TextDecoder();\r\n\r\n    if (!reader) {\r\n      throw new Error(\"No response body reader available\");\r\n    }\r\n\r\n    try {\r\n      let buffer = \"\";\r\n\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n\r\n        if (done) break;\r\n\r\n        buffer += decoder.decode(value, { stream: true });\r\n        const lines = buffer.split(\"\\n\");\r\n\r\n        // Keep the last incomplete line in the buffer\r\n        buffer = lines.pop() || \"\";\r\n\r\n        for (const line of lines) {\r\n          const trimmedLine = line.trim();\r\n\r\n          if (trimmedLine.startsWith(\"data: \")) {\r\n            const data = trimmedLine.slice(6);\r\n\r\n            if (data === \"[DONE]\") {\r\n              return;\r\n            }\r\n\r\n            try {\r\n              const parsed: StreamChunk = JSON.parse(data);\r\n              yield parsed;\r\n            } catch (e) {\r\n              console.warn(\"Failed to parse SSE data:\", data, e);\r\n              // Continue processing other chunks\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n    }\r\n  }\r\n\r\n  // Get available models (matches your /api/chat/models endpoint)\r\n  async getAvailableModels(): Promise<{\r\n    models: string[];\r\n    current: { name: string; description: string; maxTokens: number };\r\n    features: Record<string, boolean>;\r\n  }> {\r\n    const response = await fetch(`${this.apiUrl}/api/chat/models`, {\r\n      method: \"GET\",\r\n      headers: this.defaultHeaders,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch models: ${response.status}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  // Test the API connection (matches your /api/chat/test endpoint)\r\n  async testChat(): Promise<{ success: boolean; message: string }> {\r\n    try {\r\n      const response = await fetch(`${this.apiUrl}/api/chat/test`, {\r\n        method: \"GET\",\r\n        headers: this.defaultHeaders,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        return { success: false, message: `Test failed: ${response.status}` };\r\n      }\r\n\r\n      const result = await response.json();\r\n      return {\r\n        success: true,\r\n        message: result.message || \"Test successful\",\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error instanceof Error ? error.message : \"Test failed\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get content types (if Contentstack is enabled)\r\n  async getContentTypes(): Promise<string[]> {\r\n    try {\r\n      const response = await fetch(`${this.apiUrl}/api/chat/content-types`, {\r\n        method: \"GET\",\r\n        headers: this.defaultHeaders,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        return [];\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result.contentTypes || [];\r\n    } catch (error) {\r\n      console.warn(\"Failed to fetch content types:\", error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n","// src/hooks/useChat.ts\r\nimport { useState, useCallback, useRef, useEffect } from \"react\";\r\nimport { ChatState, Message, ChatApiRequest } from \"../types\";\r\nimport { ChatApiService } from \"../services/chatApi\";\r\n\r\nexport const useChat = (\r\n  apiUrl: string,\r\n  options?: {\r\n    agentId?: string | undefined;\r\n    useContentstack?: boolean | undefined;\r\n    contentTypes?: string[] | undefined;\r\n    maxContextLength?: number | undefined;\r\n    userId?: string | undefined;\r\n  }\r\n) => {\r\n  const [state, setState] = useState<ChatState>({\r\n    messages: [],\r\n    isLoading: false,\r\n    isConnected: false,\r\n    error: null,\r\n    conversationId: null,\r\n  });\r\n\r\n  const chatApiRef = useRef(new ChatApiService(apiUrl));\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n  const connectionTestedRef = useRef(false);\r\n\r\n  // Test connection on mount\r\n  useEffect(() => {\r\n    const testConnection = async () => {\r\n      if (connectionTestedRef.current) return;\r\n\r\n      try {\r\n        connectionTestedRef.current = true;\r\n        const result = await chatApiRef.current.testConnection();\r\n\r\n        setState((prev) => ({\r\n          ...prev,\r\n          isConnected: result.success,\r\n          error: result.success ? null : result.error || \"Connection failed\",\r\n        }));\r\n      } catch (error) {\r\n        setState((prev) => ({\r\n          ...prev,\r\n          isConnected: false,\r\n          error:\r\n            error instanceof Error ? error.message : \"Connection test failed\",\r\n        }));\r\n      }\r\n    };\r\n\r\n    testConnection();\r\n  }, []);\r\n\r\n  const sendMessage = useCallback(\r\n    async (content: string, streaming: boolean = true) => {\r\n      // Cancel any ongoing request\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n\r\n      abortControllerRef.current = new AbortController();\r\n\r\n      const userMessage: Message = {\r\n        id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n        content,\r\n        role: \"user\",\r\n        timestamp: new Date(),\r\n        metadata: options?.userId\r\n          ? {\r\n              userId: options.userId,\r\n            }\r\n          : undefined,\r\n      };\r\n\r\n      // Add user message\r\n      setState((prev) => ({\r\n        ...prev,\r\n        messages: [...prev.messages, userMessage],\r\n        isLoading: true,\r\n        error: null,\r\n      }));\r\n\r\n      try {\r\n        const request: ChatApiRequest = {\r\n          message: content,\r\n          conversationId: state.conversationId || undefined,\r\n          userId: options?.userId || undefined,\r\n          stream: streaming,\r\n          useContentstack: options?.useContentstack || undefined,\r\n          contentTypes: options?.contentTypes || undefined,\r\n          maxContextLength: options?.maxContextLength || undefined,\r\n        };\r\n\r\n        if (streaming) {\r\n          // Handle streaming response\r\n          const response = await chatApiRef.current.sendStreamingMessage(\r\n            request\r\n          );\r\n\r\n          let assistantMessage: Message = {\r\n            id: `assistant-${Date.now()}-${Math.random()\r\n              .toString(36)\r\n              .substr(2, 9)}`,\r\n            content: \"\",\r\n            role: \"assistant\",\r\n            timestamp: new Date(),\r\n            metadata: {},\r\n          };\r\n\r\n          // Add assistant message placeholder\r\n          setState((prev) => ({\r\n            ...prev,\r\n            messages: [...prev.messages, assistantMessage],\r\n            isConnected: true,\r\n          }));\r\n\r\n          // Process streaming chunks\r\n          for await (const chunk of chatApiRef.current.processStreamingResponse(\r\n            response\r\n          )) {\r\n            if (chunk.type === \"content\" && chunk.content) {\r\n              assistantMessage = {\r\n                ...assistantMessage,\r\n                content: assistantMessage.content + chunk.content,\r\n              };\r\n\r\n              setState((prev) => ({\r\n                ...prev,\r\n                messages: [...prev.messages.slice(0, -1), assistantMessage],\r\n              }));\r\n            } else if (chunk.type === \"done\") {\r\n              // Final update with complete content\r\n              if (chunk.metadata.fullContent) {\r\n                assistantMessage = {\r\n                  ...assistantMessage,\r\n                  content: chunk.metadata.fullContent,\r\n                  timestamp: new Date(chunk.metadata.timestamp),\r\n                };\r\n\r\n                setState((prev) => ({\r\n                  ...prev,\r\n                  messages: [...prev.messages.slice(0, -1), assistantMessage],\r\n                  conversationId: prev.conversationId || `conv-${Date.now()}`,\r\n                }));\r\n              }\r\n              break;\r\n            } else if (chunk.type === \"error\") {\r\n              throw new Error(chunk.error || \"Streaming error occurred\");\r\n            }\r\n          }\r\n        } else {\r\n          // Handle non-streaming response\r\n          const response = await chatApiRef.current.sendMessage(request);\r\n\r\n          const assistantMessage: Message = {\r\n            id: response.message.id,\r\n            content: response.message.content,\r\n            role: response.message.role,\r\n            timestamp: new Date(response.message.timestamp),\r\n            metadata: {\r\n              contentEnhanced: response.enhancedWithContent,\r\n            },\r\n          };\r\n\r\n          setState((prev) => ({\r\n            ...prev,\r\n            messages: [...prev.messages, assistantMessage],\r\n            conversationId: response.conversationId,\r\n            isConnected: true,\r\n          }));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Chat error:\", error);\r\n        setState((prev) => ({\r\n          ...prev,\r\n          error:\r\n            error instanceof Error\r\n              ? error.message\r\n              : \"An error occurred while sending the message\",\r\n          isConnected: false,\r\n        }));\r\n      } finally {\r\n        setState((prev) => ({ ...prev, isLoading: false }));\r\n        abortControllerRef.current = null;\r\n      }\r\n    },\r\n    [options, state.conversationId]\r\n  );\r\n\r\n  const clearMessages = useCallback(() => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      messages: [],\r\n      conversationId: null,\r\n      error: null,\r\n    }));\r\n  }, []);\r\n\r\n  const retry = useCallback(() => {\r\n    setState((prev) => ({ ...prev, error: null }));\r\n  }, []);\r\n\r\n  const reconnect = useCallback(async () => {\r\n    setState((prev) => ({ ...prev, isLoading: true, error: null }));\r\n\r\n    try {\r\n      const result = await chatApiRef.current.testConnection();\r\n      setState((prev) => ({\r\n        ...prev,\r\n        isConnected: result.success,\r\n        error: result.success ? null : result.error || \"Reconnection failed\",\r\n        isLoading: false,\r\n      }));\r\n    } catch (error) {\r\n      setState((prev) => ({\r\n        ...prev,\r\n        isConnected: false,\r\n        error: error instanceof Error ? error.message : \"Reconnection failed\",\r\n        isLoading: false,\r\n      }));\r\n    }\r\n  }, []);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    ...state,\r\n    sendMessage,\r\n    clearMessages,\r\n    retry,\r\n    reconnect,\r\n  };\r\n};\r\n","// src/hooks/useTheme.ts\r\nimport { useMemo } from \"react\";\r\nimport { Theme } from \"../types\";\r\n\r\nconst defaultTheme: Theme = {\r\n  primaryColor: \"#007bff\",\r\n  fontFamily:\r\n    'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\r\n  borderRadius: \"8px\",\r\n  backgroundColor: \"#ffffff\",\r\n  textColor: \"#333333\",\r\n  inputBorderColor: \"#e1e5e9\",\r\n  headerColor: \"#007bff\",\r\n  userMessageColor: \"#007bff\",\r\n  assistantMessageColor: \"#f8f9fa\",\r\n};\r\n\r\nexport const useTheme = (customTheme?: Partial<Theme>) => {\r\n  const theme = useMemo(\r\n    () => ({\r\n      ...defaultTheme,\r\n      ...customTheme,\r\n    }),\r\n    [customTheme]\r\n  );\r\n\r\n  const cssVariables = useMemo(\r\n    () =>\r\n      ({\r\n        \"--techsurf-chat-primary-color\": theme.primaryColor,\r\n        \"--techsurf-chat-font-family\": theme.fontFamily,\r\n        \"--techsurf-chat-border-radius\": theme.borderRadius,\r\n        \"--techsurf-chat-bg-color\": theme.backgroundColor,\r\n        \"--techsurf-chat-text-color\": theme.textColor,\r\n        \"--techsurf-chat-input-border-color\": theme.inputBorderColor,\r\n        \"--techsurf-chat-header-color\": theme.headerColor,\r\n        \"--techsurf-chat-user-message-color\": theme.userMessageColor,\r\n        \"--techsurf-chat-assistant-message-color\": theme.assistantMessageColor,\r\n      } as React.CSSProperties),\r\n    [theme]\r\n  );\r\n\r\n  return { theme, cssVariables };\r\n};\r\n","// src/components/ChatHeader.tsx\r\nimport React from \"react\";\r\n\r\ninterface ChatHeaderProps {\r\n  title: string;\r\n  subtitle?: string | undefined;\r\n  onMinimize?: (() => void) | undefined;\r\n  onClose?: (() => void) | undefined;\r\n  isConnected?: boolean | undefined;\r\n  isLoading?: boolean | undefined;\r\n  showConnectionStatus?: boolean | undefined;\r\n}\r\n\r\nexport const ChatHeader: React.FC<ChatHeaderProps> = ({\r\n  title,\r\n  subtitle,\r\n  onMinimize,\r\n  onClose,\r\n  isConnected = false,\r\n  isLoading = false,\r\n  showConnectionStatus = true,\r\n}) => {\r\n  const getConnectionStatus = () => {\r\n    if (isLoading)\r\n      return { text: \"Connecting...\", className: \"techsurf-connecting\" };\r\n    if (isConnected) return { text: \"Online\", className: \"techsurf-connected\" };\r\n    return { text: \"Offline\", className: \"techsurf-disconnected\" };\r\n  };\r\n\r\n  const connectionStatus = getConnectionStatus();\r\n\r\n  return (\r\n    <header className=\"techsurf-chat-header\">\r\n      <div className=\"techsurf-header-content\">\r\n        <div className=\"techsurf-header-info\">\r\n          <h3 className=\"techsurf-chat-title\">{title}</h3>\r\n          {subtitle && <p className=\"techsurf-chat-subtitle\">{subtitle}</p>}\r\n          {showConnectionStatus && (\r\n            <div className=\"techsurf-connection-status\">\r\n              <div\r\n                className={`techsurf-status-dot ${connectionStatus.className}`}\r\n              />\r\n              <span className=\"techsurf-status-text\">\r\n                {connectionStatus.text}\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"techsurf-header-actions\">\r\n          {onMinimize && (\r\n            <button\r\n              className=\"techsurf-header-button techsurf-minimize-button\"\r\n              onClick={onMinimize}\r\n              aria-label=\"Minimize chat\"\r\n              type=\"button\"\r\n            >\r\n              <svg\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"2\"\r\n              >\r\n                <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n              </svg>\r\n            </button>\r\n          )}\r\n\r\n          {onClose && (\r\n            <button\r\n              className=\"techsurf-header-button techsurf-close-button\"\r\n              onClick={onClose}\r\n              aria-label=\"Close chat\"\r\n              type=\"button\"\r\n            >\r\n              <svg\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"2\"\r\n              >\r\n                <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n              </svg>\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","// src/components/MessageBubble.tsx\r\nimport React from \"react\";\r\nimport { Message } from \"../types\";\r\n\r\ninterface MessageBubbleProps {\r\n  message: Message;\r\n  isStreaming?: boolean;\r\n  showTimestamp?: boolean;\r\n}\r\n\r\nexport const MessageBubble: React.FC<MessageBubbleProps> = ({\r\n  message,\r\n  isStreaming = false,\r\n  showTimestamp = true,\r\n}) => {\r\n  const isUser = message.role === \"user\";\r\n  const isSystem = message.role === \"system\";\r\n\r\n  // Don't render system messages in the UI\r\n  if (isSystem) return null;\r\n\r\n  const formatTime = (date: Date) => {\r\n    return date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" });\r\n  };\r\n\r\n  const messageClasses = [\r\n    \"techsurf-message-bubble\",\r\n    isUser ? \"techsurf-user-message\" : \"techsurf-assistant-message\",\r\n    isStreaming ? \"techsurf-streaming\" : \"\",\r\n  ]\r\n    .filter(Boolean)\r\n    .join(\" \");\r\n\r\n  return (\r\n    <div className={messageClasses}>\r\n      <div className=\"techsurf-message-content\">\r\n        <div className=\"techsurf-message-text\">\r\n          {message.content}\r\n          {isStreaming && <span className=\"techsurf-cursor\">|</span>}\r\n        </div>\r\n        {message.metadata?.contentEnhanced && (\r\n          <div\r\n            className=\"techsurf-content-badge\"\r\n            title=\"Enhanced with knowledge base\"\r\n          >\r\n            🧠 Enhanced\r\n          </div>\r\n        )}\r\n      </div>\r\n      {showTimestamp && (\r\n        <div className=\"techsurf-message-timestamp\">\r\n          {formatTime(message.timestamp)}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","// src/components/LoadingIndicator.tsx\r\nimport React from \"react\";\r\n\r\ninterface LoadingIndicatorProps {\r\n  message?: string;\r\n  className?: string;\r\n}\r\n\r\nexport const LoadingIndicator: React.FC<LoadingIndicatorProps> = ({\r\n  message = \"AI is thinking...\",\r\n  className = \"\",\r\n}) => {\r\n  return (\r\n    <div className={`techsurf-loading-indicator ${className}`}>\r\n      <div className=\"techsurf-loading-dots\">\r\n        <div className=\"techsurf-dot\"></div>\r\n        <div className=\"techsurf-dot\"></div>\r\n        <div className=\"techsurf-dot\"></div>\r\n      </div>\r\n      <span className=\"techsurf-loading-message\">{message}</span>\r\n    </div>\r\n  );\r\n};\r\n","// src/components/MessageList.tsx\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport { Message } from \"../types\";\r\nimport { MessageBubble } from \"./MessageBubble\";\r\nimport { LoadingIndicator } from \"./LoadingIndicator\";\r\n\r\ninterface MessageListProps {\r\n  messages: Message[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  onRetry?: () => void;\r\n  showTimestamps?: boolean;\r\n  emptyStateMessage?: string;\r\n}\r\n\r\nexport const MessageList: React.FC<MessageListProps> = ({\r\n  messages,\r\n  isLoading,\r\n  error,\r\n  onRetry,\r\n  showTimestamps = true,\r\n  emptyStateMessage = \"Start a conversation with your AI assistant!\",\r\n}) => {\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Scroll to bottom when new messages arrive or loading state changes\r\n    const timeoutId = setTimeout(() => {\r\n      scrollToBottom();\r\n    }, 100);\r\n\r\n    return () => clearTimeout(timeoutId);\r\n  }, [messages.length, isLoading]);\r\n\r\n  // Filter out system messages for display\r\n  const displayMessages = messages.filter((msg) => msg.role !== \"system\");\r\n\r\n  return (\r\n    <div className=\"techsurf-message-list\" ref={containerRef}>\r\n      <div className=\"techsurf-messages-container\">\r\n        {displayMessages.length === 0 && !isLoading && !error && (\r\n          <div className=\"techsurf-empty-state\">\r\n            <div className=\"techsurf-empty-icon\">💬</div>\r\n            <p className=\"techsurf-empty-message\">{emptyStateMessage}</p>\r\n          </div>\r\n        )}\r\n\r\n        {displayMessages.map((message, index) => (\r\n          <MessageBubble\r\n            key={message.id}\r\n            message={message}\r\n            isStreaming={\r\n              isLoading &&\r\n              message.role === \"assistant\" &&\r\n              index === displayMessages.length - 1\r\n            }\r\n            showTimestamp={showTimestamps}\r\n          />\r\n        ))}\r\n\r\n        {isLoading &&\r\n          displayMessages.length > 0 &&\r\n          displayMessages[displayMessages.length - 1]?.role === \"user\" && (\r\n            <LoadingIndicator message=\"AI is responding...\" />\r\n          )}\r\n\r\n        {error && (\r\n          <div className=\"techsurf-error-message\">\r\n            <div className=\"techsurf-error-content\">\r\n              <span className=\"techsurf-error-icon\">⚠️</span>\r\n              <span className=\"techsurf-error-text\">{error}</span>\r\n            </div>\r\n            {onRetry && (\r\n              <button\r\n                className=\"techsurf-retry-button\"\r\n                onClick={onRetry}\r\n                type=\"button\"\r\n              >\r\n                Retry\r\n              </button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div ref={messagesEndRef} />\r\n    </div>\r\n  );\r\n};\r\n","// src/components/ChatInput.tsx\r\nimport React, {\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  KeyboardEvent,\r\n  FormEvent,\r\n} from \"react\";\r\n\r\ninterface ChatInputProps {\r\n  onSendMessage: (message: string) => void;\r\n  disabled?: boolean;\r\n  placeholder?: string;\r\n  maxLength?: number;\r\n  showSendButton?: boolean;\r\n}\r\n\r\nexport const ChatInput: React.FC<ChatInputProps> = ({\r\n  onSendMessage,\r\n  disabled = false,\r\n  placeholder = \"Type your message...\",\r\n  maxLength = 2000,\r\n  showSendButton = true,\r\n}) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  const formRef = useRef<HTMLFormElement>(null);\r\n\r\n  const adjustTextareaHeight = () => {\r\n    const textarea = textareaRef.current;\r\n    if (textarea) {\r\n      textarea.style.height = \"auto\";\r\n      const scrollHeight = textarea.scrollHeight;\r\n      const maxHeight = 120; // Maximum height in pixels\r\n      textarea.style.height = Math.min(scrollHeight, maxHeight) + \"px\";\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    adjustTextareaHeight();\r\n  }, [message]);\r\n\r\n  const handleSend = (e?: FormEvent) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    const trimmedMessage = message.trim();\r\n    if (trimmedMessage && !disabled && trimmedMessage.length <= maxLength) {\r\n      onSendMessage(trimmedMessage);\r\n      setMessage(\"\");\r\n\r\n      // Reset textarea height\r\n      if (textareaRef.current) {\r\n        textareaRef.current.style.height = \"auto\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSend();\r\n    }\r\n\r\n    if (e.key === \"Escape\") {\r\n      setMessage(\"\");\r\n      textareaRef.current?.blur();\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const newValue = e.target.value;\r\n    if (newValue.length <= maxLength) {\r\n      setMessage(newValue);\r\n    }\r\n  };\r\n\r\n  const canSend =\r\n    message.trim().length > 0 && !disabled && message.length <= maxLength;\r\n\r\n  return (\r\n    <form\r\n      className=\"techsurf-chat-input-container\"\r\n      onSubmit={handleSend}\r\n      ref={formRef}\r\n    >\r\n      <div className=\"techsurf-input-wrapper\">\r\n        <textarea\r\n          ref={textareaRef}\r\n          className=\"techsurf-message-input\"\r\n          value={message}\r\n          onChange={handleChange}\r\n          onKeyDown={handleKeyDown}\r\n          placeholder={disabled ? \"Connecting...\" : placeholder}\r\n          disabled={disabled}\r\n          rows={1}\r\n          aria-label=\"Type your message\"\r\n        />\r\n\r\n        <div className=\"techsurf-input-actions\">\r\n          {maxLength > 0 && (\r\n            <div\r\n              className={`techsurf-char-counter ${\r\n                message.length > maxLength * 0.9 ? \"techsurf-char-warning\" : \"\"\r\n              }`}\r\n            >\r\n              {message.length}/{maxLength}\r\n            </div>\r\n          )}\r\n\r\n          {showSendButton && (\r\n            <button\r\n              type=\"submit\"\r\n              className=\"techsurf-send-button\"\r\n              disabled={!canSend}\r\n              aria-label=\"Send message\"\r\n            >\r\n              <svg\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"2\"\r\n                className=\"techsurf-send-icon\"\r\n                aria-hidden=\"true\"\r\n              >\r\n                <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\" />\r\n                <polygon points=\"22,2 15,22 11,13 2,9 22,2\" />\r\n              </svg>\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"techsurf-input-hint\">\r\n        Press Enter to send, Shift+Enter for new line, Esc to clear\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n","// src/ChatWidget.tsx\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { ChatWidgetProps } from \"./types\";\r\nimport { useChat } from \"./hooks/useChat\";\r\nimport { useTheme } from \"./hooks/useTheme\";\r\nimport { ChatHeader } from \"./components/ChatHeader\";\r\nimport { MessageList } from \"./components/MessageList\";\r\nimport { ChatInput } from \"./components/ChatInput\";\r\n\r\n// Declare process for environment check\r\ndeclare const process: {\r\n  env: {\r\n    NODE_ENV: string;\r\n  };\r\n};\r\n\r\nexport const ChatWidget: React.FC<ChatWidgetProps> = ({\r\n  apiUrl,\r\n  agentId,\r\n  theme,\r\n  title = \"AI Assistant\",\r\n  placeholder = \"Type your message...\",\r\n  height = \"500px\",\r\n  width = \"380px\",\r\n  position = \"bottom-right\",\r\n  minimized = false,\r\n  useContentstack = true,\r\n  contentTypes = [],\r\n  maxContextLength = 2000,\r\n  onMessage,\r\n  onError,\r\n  onConnect,\r\n  onDisconnect,\r\n}) => {\r\n  const [isMinimized, setIsMinimized] = useState(minimized);\r\n  const [isVisible, setIsVisible] = useState(!minimized);\r\n  const [hasInteracted, setHasInteracted] = useState(false);\r\n\r\n  const chatOptions = {\r\n    agentId: agentId || undefined,\r\n    useContentstack: useContentstack || undefined,\r\n    contentTypes: contentTypes || undefined,\r\n    maxContextLength: maxContextLength || undefined,\r\n    userId: `user-${Date.now()}`, // Simple user ID generation\r\n  };\r\n\r\n  const {\r\n    messages,\r\n    isLoading,\r\n    isConnected,\r\n    error,\r\n    sendMessage,\r\n    retry,\r\n    reconnect,\r\n  } = useChat(apiUrl, chatOptions);\r\n\r\n  const { cssVariables } = useTheme(theme);\r\n\r\n  // Handle message callback\r\n  useEffect(() => {\r\n    if (onMessage && messages.length > 0) {\r\n      const latestMessage = messages[messages.length - 1];\r\n      // Only call for assistant messages to avoid echoing user input\r\n      if (latestMessage && latestMessage.role === \"assistant\") {\r\n        onMessage(latestMessage);\r\n      }\r\n    }\r\n  }, [messages, onMessage]);\r\n\r\n  // Handle error callback\r\n  useEffect(() => {\r\n    if (onError && error) {\r\n      onError(new Error(error));\r\n    }\r\n  }, [error, onError]);\r\n\r\n  // Handle connection callbacks\r\n  useEffect(() => {\r\n    if (isConnected && onConnect) {\r\n      onConnect();\r\n    } else if (!isConnected && hasInteracted && onDisconnect) {\r\n      onDisconnect();\r\n    }\r\n  }, [isConnected, onConnect, onDisconnect, hasInteracted]);\r\n\r\n  const handleMinimize = useCallback(() => {\r\n    setIsMinimized(!isMinimized);\r\n  }, [isMinimized]);\r\n\r\n  const handleToggleVisibility = useCallback(() => {\r\n    setIsVisible(!isVisible);\r\n    if (!isVisible) {\r\n      setIsMinimized(false);\r\n    }\r\n  }, [isVisible]);\r\n\r\n  const handleSendMessage = useCallback(\r\n    async (content: string) => {\r\n      setHasInteracted(true);\r\n      await sendMessage(content, true); // Always use streaming\r\n    },\r\n    [sendMessage]\r\n  );\r\n\r\n  const handleRetry = useCallback(() => {\r\n    retry();\r\n    if (!isConnected) {\r\n      reconnect();\r\n    }\r\n  }, [retry, reconnect, isConnected]);\r\n\r\n  const getPositionClasses = () => {\r\n    switch (position) {\r\n      case \"bottom-left\":\r\n        return \"techsurf-position-bottom-left\";\r\n      case \"center\":\r\n        return \"techsurf-position-center\";\r\n      default:\r\n        return \"techsurf-position-bottom-right\";\r\n    }\r\n  };\r\n\r\n  // Handle keyboard shortcuts\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      // ESC to minimize (only when chat is focused)\r\n      if (e.key === \"Escape\" && isVisible && !isMinimized) {\r\n        const activeElement = document.activeElement;\r\n        const chatElement = document.querySelector(\".techsurf-chat-widget\");\r\n\r\n        if (chatElement?.contains(activeElement)) {\r\n          setIsMinimized(true);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (isVisible) {\r\n      document.addEventListener(\"keydown\", handleKeyDown);\r\n      return () => document.removeEventListener(\"keydown\", handleKeyDown);\r\n    }\r\n  }, [isVisible, isMinimized]);\r\n\r\n  return (\r\n    <div\r\n      className={`techsurf-chat-widget-container ${getPositionClasses()}`}\r\n      style={cssVariables}\r\n    >\r\n      {/* Chat Trigger Button */}\r\n      {!isVisible && (\r\n        <button\r\n          className=\"techsurf-chat-trigger-button\"\r\n          onClick={handleToggleVisibility}\r\n          aria-label={`Open ${title}`}\r\n          type=\"button\"\r\n        >\r\n          <svg\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"2\"\r\n            className=\"techsurf-chat-icon\"\r\n            aria-hidden=\"true\"\r\n          >\r\n            <path d=\"21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z\" />\r\n          </svg>\r\n\r\n          {/* Notification badge for connection issues */}\r\n          {!isConnected && hasInteracted && (\r\n            <div\r\n              className=\"techsurf-notification-badge\"\r\n              aria-label=\"Connection issue\"\r\n            >\r\n              !\r\n            </div>\r\n          )}\r\n        </button>\r\n      )}\r\n\r\n      {/* Chat Widget */}\r\n      {isVisible && (\r\n        <div\r\n          className={`techsurf-chat-widget ${\r\n            isMinimized ? \"techsurf-minimized\" : \"\"\r\n          }`}\r\n          style={{\r\n            height: isMinimized ? \"auto\" : height,\r\n            width: width,\r\n          }}\r\n          role=\"dialog\"\r\n          aria-labelledby=\"techsurf-chat-title\"\r\n        >\r\n          <ChatHeader\r\n            title={title}\r\n            subtitle={\r\n              useContentstack ? \"Enhanced with knowledge base\" : undefined\r\n            }\r\n            onMinimize={handleMinimize}\r\n            onClose={handleToggleVisibility}\r\n            isConnected={isConnected}\r\n            isLoading={isLoading && !hasInteracted}\r\n            showConnectionStatus={hasInteracted}\r\n          />\r\n\r\n          {!isMinimized && (\r\n            <>\r\n              <MessageList\r\n                messages={messages}\r\n                isLoading={isLoading}\r\n                error={error}\r\n                onRetry={handleRetry}\r\n                emptyStateMessage={`Hi! I'm your ${title.toLowerCase()}. ${\r\n                  useContentstack\r\n                    ? \"I have access to our knowledge base to provide accurate information.\"\r\n                    : \"How can I help you today?\"\r\n                }`}\r\n              />\r\n\r\n              <ChatInput\r\n                onSendMessage={handleSendMessage}\r\n                disabled={isLoading || (!isConnected && hasInteracted)}\r\n                placeholder={\r\n                  !isConnected && hasInteracted\r\n                    ? \"Reconnecting...\"\r\n                    : placeholder\r\n                }\r\n                maxLength={2000}\r\n              />\r\n\r\n              {/* Debug info in development */}\r\n              {typeof process !== \"undefined\" &&\r\n                process.env?.NODE_ENV === \"development\" && (\r\n                  <div className=\"techsurf-debug-info\">\r\n                    <small>\r\n                      Connected: {isConnected ? \"✓\" : \"✗\"} | Content:{\" \"}\r\n                      {useContentstack ? \"✓\" : \"✗\"} | Messages:{\" \"}\r\n                      {messages.length}\r\n                    </small>\r\n                  </div>\r\n                )}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Default export for easier importing\r\nexport default ChatWidget;\r\n"],"names":["ChatApiService","constructor","apiUrl","__publicField","this","replace","defaultHeaders","testConnection","response","fetch","method","headers","ok","success","error","status","statusText","health","json","Error","message","sendStreamingMessage","request","Accept","body","JSON","stringify","stream","sendMessage","errorText","text","processStreamingResponse","reader","_a","getReader","decoder","TextDecoder","buffer","done","value","read","decode","lines","split","pop","line","trimmedLine","trim","startsWith","data","slice","parsed","parse","e","console","warn","releaseLock","getAvailableModels","testChat","getContentTypes","contentTypes","useChat","options","state","setState","useState","messages","isLoading","isConnected","conversationId","chatApiRef","useRef","abortControllerRef","connectionTestedRef","useEffect","async","current","result","prev","useCallback","content","streaming","abort","AbortController","userMessage","id","Date","now","Math","random","toString","substr","role","timestamp","metadata","userId","useContentstack","maxContextLength","assistantMessage","chunk","type","fullContent","contentEnhanced","enhancedWithContent","clearMessages","retry","reconnect","defaultTheme","primaryColor","fontFamily","borderRadius","backgroundColor","textColor","inputBorderColor","headerColor","userMessageColor","assistantMessageColor","useTheme","customTheme","theme","useMemo","cssVariables","ChatHeader","title","subtitle","onMinimize","onClose","showConnectionStatus","connectionStatus","className","children","jsxs","jsx","onClick","viewBox","fill","stroke","strokeWidth","x1","y1","x2","y2","MessageBubble","isStreaming","showTimestamp","isUser","messageClasses","filter","Boolean","join","date","toLocaleTimeString","hour","minute","LoadingIndicator","MessageList","onRetry","showTimestamps","emptyStateMessage","messagesEndRef","containerRef","timeoutId","setTimeout","scrollIntoView","behavior","block","clearTimeout","length","displayMessages","msg","ref","map","index","ChatInput","onSendMessage","disabled","placeholder","maxLength","showSendButton","setMessage","textareaRef","formRef","textarea","style","height","scrollHeight","maxHeight","min","adjustTextareaHeight","handleSend","preventDefault","trimmedMessage","canSend","onSubmit","onChange","newValue","target","onKeyDown","key","shiftKey","blur","rows","points","ChatWidget","agentId","width","position","minimized","onMessage","onError","onConnect","onDisconnect","isMinimized","setIsMinimized","isVisible","setIsVisible","hasInteracted","setHasInteracted","chatOptions","latestMessage","handleMinimize","handleToggleVisibility","handleSendMessage","handleRetry","handleKeyDown","activeElement","document","chatElement","querySelector","contains","addEventListener","removeEventListener","getPositionClasses","d","Fragment","toLowerCase","process","env","NODE_ENV"],"mappings":"kSAGO,MAAMA,EAIX,WAAAC,CAAYC,GAHJC,EAAAC,KAAA,UACAD,EAAAC,KAAA,kBAINA,KAAKF,OAASA,EAAOG,QAAQ,MAAO,IACpCD,KAAKE,eAAiB,CACpB,eAAgB,mBAEpB,CAGA,oBAAMC,GACJ,IACE,MAAMC,QAAiBC,MAAM,GAAGL,KAAKF,gBAAiB,CACpDQ,OAAQ,MACRC,QAASP,KAAKE,iBAGhB,IAAKE,EAASI,GACZ,MAAO,CACLC,SAAS,EACTC,MAAO,wBAAwBN,EAASO,UAAUP,EAASQ,cAI/D,MAAMC,QAAeT,EAASU,OAC9B,MAAO,CACLL,QAA2B,YAAlBI,EAAOF,QAA0C,aAAlBE,EAAOF,OAC/CD,MAAyB,YAAlBG,EAAOF,OAAuBE,EAAOH,WAAQ,EAExD,OAASA,GACP,MAAO,CACLD,SAAS,EACTC,MAAOA,aAAiBK,MAAQL,EAAMM,QAAU,oBAEpD,CACF,CAGA,0BAAMC,CAAqBC,GACzB,MAAMd,QAAiBC,MAAM,GAAGL,KAAKF,kBAAmB,CACtDQ,OAAQ,OACRC,QAAS,IACJP,KAAKE,eACRiB,OAAQ,qBAEVC,KAAMC,KAAKC,UAAU,IAChBJ,EACHK,QAAQ,MAIZ,IAAKnB,EAASI,GACZ,MAAM,IAAIO,MAAM,QAAQX,EAASO,WAAWP,EAASQ,cAGvD,OAAOR,CACT,CAGA,iBAAMoB,CAAYN,GAChB,MAAMd,QAAiBC,MAAM,GAAGL,KAAKF,kBAAmB,CACtDQ,OAAQ,OACRC,QAASP,KAAKE,eACdkB,KAAMC,KAAKC,UAAU,IAChBJ,EACHK,QAAQ,MAIZ,IAAKnB,EAASI,GAAI,CAChB,MAAMiB,QAAkBrB,EAASsB,OACjC,MAAM,IAAIX,MAAM,QAAQX,EAASO,WAAWc,IAC9C,CAEA,OAAOrB,EAASU,MAClB,CAGA,8BAAOa,CACLvB,SAEA,MAAMwB,EAAS,OAAAC,EAAAzB,EAASgB,WAAT,EAAAS,EAAeC,YACxBC,EAAU,IAAIC,YAEpB,IAAKJ,EACH,MAAM,IAAIb,MAAM,qCAGlB,IACE,IAAIkB,EAAS,GAEb,OAAa,CACX,MAAMC,KAAEA,EAAAC,MAAMA,SAAgBP,EAAOQ,OAErC,GAAIF,EAAM,MAEVD,GAAUF,EAAQM,OAAOF,EAAO,CAAEZ,QAAQ,IAC1C,MAAMe,EAAQL,EAAOM,MAAM,MAG3BN,EAASK,EAAME,OAAS,GAExB,IAAA,MAAWC,KAAQH,EAAO,CACxB,MAAMI,EAAcD,EAAKE,OAEzB,GAAID,EAAYE,WAAW,UAAW,CACpC,MAAMC,EAAOH,EAAYI,MAAM,GAE/B,GAAa,WAATD,EACF,OAGF,IACE,MAAME,EAAsB1B,KAAK2B,MAAMH,SACjCE,CACR,OAASE,GACPC,QAAQC,KAAK,4BAA6BN,EAAMI,EAElD,CACF,CACF,CACF,CACF,CAAA,QACErB,EAAOwB,aACT,CACF,CAGA,wBAAMC,GAKJ,MAAMjD,QAAiBC,MAAM,GAAGL,KAAKF,yBAA0B,CAC7DQ,OAAQ,MACRC,QAASP,KAAKE,iBAGhB,IAAKE,EAASI,GACZ,MAAM,IAAIO,MAAM,2BAA2BX,EAASO,UAGtD,OAAOP,EAASU,MAClB,CAGA,cAAMwC,GACJ,IACE,MAAMlD,QAAiBC,MAAM,GAAGL,KAAKF,uBAAwB,CAC3DQ,OAAQ,MACRC,QAASP,KAAKE,iBAGhB,IAAKE,EAASI,GACZ,MAAO,CAAEC,SAAS,EAAOO,QAAS,gBAAgBZ,EAASO,UAI7D,MAAO,CACLF,SAAS,EACTO,eAHmBZ,EAASU,QAGZE,SAAW,kBAE/B,OAASN,GACP,MAAO,CACLD,SAAS,EACTO,QAASN,aAAiBK,MAAQL,EAAMM,QAAU,cAEtD,CACF,CAGA,qBAAMuC,GACJ,IACE,MAAMnD,QAAiBC,MAAM,GAAGL,KAAKF,gCAAiC,CACpEQ,OAAQ,MACRC,QAASP,KAAKE,iBAGhB,IAAKE,EAASI,GACZ,MAAO,GAIT,aADqBJ,EAASU,QAChB0C,cAAgB,EAChC,OAAS9C,GAEP,OADAwC,QAAQC,KAAK,iCAAkCzC,GACxC,EACT,CACF,EC7LK,MAAM+C,EAAU,CACrB3D,EACA4D,KAQA,MAAOC,EAAOC,GAAYC,WAAoB,CAC5CC,SAAU,GACVC,WAAW,EACXC,aAAa,EACbtD,MAAO,KACPuD,eAAgB,OAGZC,EAAaC,EAAAA,OAAO,IAAIvE,EAAeE,IACvCsE,EAAqBD,EAAAA,OAA+B,MACpDE,EAAsBF,EAAAA,QAAO,GAGnCG,EAAAA,UAAU,KACeC,WACrB,IAAIF,EAAoBG,QAExB,IACEH,EAAoBG,SAAU,EAC9B,MAAMC,QAAeP,EAAWM,QAAQrE,iBAExCyD,EAAUc,IAAA,IACLA,EACHV,YAAaS,EAAOhE,QACpBC,MAAO+D,EAAOhE,QAAU,KAAOgE,EAAO/D,OAAS,sBAEnD,OAASA,GACPkD,EAAUc,IAAA,IACLA,EACHV,aAAa,EACbtD,MACEA,aAAiBK,MAAQL,EAAMM,QAAU,2BAE/C,GAGFb,IACC,IAEH,MAAMqB,EAAcmD,EAAAA,YAClBJ,MAAOK,EAAiBC,GAAqB,KAEvCT,EAAmBI,SACrBJ,EAAmBI,QAAQM,QAG7BV,EAAmBI,QAAU,IAAIO,gBAEjC,MAAMC,EAAuB,CAC3BC,GAAI,QAAQC,KAAKC,SAASC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,KAC/DX,UACAY,KAAM,OACNC,cAAeP,KACfQ,gBAAUhC,WAASiC,QACf,CACEA,OAAQjC,EAAQiC,aAElB,GAIN/B,EAAUc,IAAA,IACLA,EACHZ,SAAU,IAAIY,EAAKZ,SAAUkB,GAC7BjB,WAAW,EACXrD,MAAO,QAGT,IACE,MAAMQ,EAA0B,CAC9BF,QAAS4D,EACTX,eAAgBN,EAAMM,qBAAkB,EACxC0B,cAAQjC,WAASiC,cAAU,EAC3BpE,OAAQsD,EACRe,uBAAiBlC,WAASkC,uBAAmB,EAC7CpC,oBAAcE,WAASF,oBAAgB,EACvCqC,wBAAkBnC,WAASmC,wBAAoB,GAGjD,GAAIhB,EAAW,CAEb,MAAMzE,QAAiB8D,EAAWM,QAAQvD,qBACxCC,GAGF,IAAI4E,EAA4B,CAC9Bb,GAAI,aAAaC,KAAKC,SAASC,KAAKC,SACjCC,SAAS,IACTC,OAAO,EAAG,KACbX,QAAS,GACTY,KAAM,YACNC,cAAeP,KACfQ,SAAU,CAAA,GAIZ9B,EAAUc,IAAA,IACLA,EACHZ,SAAU,IAAIY,EAAKZ,SAAUgC,GAC7B9B,aAAa,KAIf,UAAA,MAAiB+B,KAAS7B,EAAWM,QAAQ7C,yBAC3CvB,GAEA,GAAmB,YAAf2F,EAAMC,MAAsBD,EAAMnB,QACpCkB,EAAmB,IACdA,EACHlB,QAASkB,EAAiBlB,QAAUmB,EAAMnB,SAG5ChB,EAAUc,IAAA,IACLA,EACHZ,SAAU,IAAIY,EAAKZ,SAAShB,MAAM,GAAG,GAAKgD,UAE9C,IAA0B,SAAfC,EAAMC,KAAiB,CAE5BD,EAAML,SAASO,cACjBH,EAAmB,IACdA,EACHlB,QAASmB,EAAML,SAASO,YACxBR,UAAW,IAAIP,KAAKa,EAAML,SAASD,YAGrC7B,EAAUc,IAAA,IACLA,EACHZ,SAAU,IAAIY,EAAKZ,SAAShB,MAAM,GAAG,GAAKgD,GAC1C7B,eAAgBS,EAAKT,gBAAkB,QAAQiB,KAAKC,YAGxD,KACF,CAAA,GAA0B,UAAfY,EAAMC,KACf,MAAM,IAAIjF,MAAMgF,EAAMrF,OAAS,2BACjC,CAEJ,KAAO,CAEL,MAAMN,QAAiB8D,EAAWM,QAAQhD,YAAYN,GAEhD4E,EAA4B,CAChCb,GAAI7E,EAASY,QAAQiE,GACrBL,QAASxE,EAASY,QAAQ4D,QAC1BY,KAAMpF,EAASY,QAAQwE,KACvBC,UAAW,IAAIP,KAAK9E,EAASY,QAAQyE,WACrCC,SAAU,CACRQ,gBAAiB9F,EAAS+F,sBAI9BvC,EAAUc,IAAA,IACLA,EACHZ,SAAU,IAAIY,EAAKZ,SAAUgC,GAC7B7B,eAAgB7D,EAAS6D,eACzBD,aAAa,IAEjB,CACF,OAAStD,GACPwC,QAAQxC,MAAM,cAAeA,GAC7BkD,EAAUc,IAAA,IACLA,EACHhE,MACEA,aAAiBK,MACbL,EAAMM,QACN,8CACNgD,aAAa,IAEjB,CAAA,QACEJ,EAAUc,IAAA,IAAeA,EAAMX,WAAW,KAC1CK,EAAmBI,QAAU,IAC/B,GAEF,CAACd,EAASC,EAAMM,iBAGZmC,EAAgBzB,EAAAA,YAAY,KAChCf,EAAUc,IAAA,IACLA,EACHZ,SAAU,GACVG,eAAgB,KAChBvD,MAAO,SAER,IAEG2F,EAAQ1B,EAAAA,YAAY,KACxBf,EAAUc,IAAA,IAAeA,EAAMhE,MAAO,SACrC,IAEG4F,EAAY3B,EAAAA,YAAYJ,UAC5BX,EAAUc,QAAeA,EAAMX,WAAW,EAAMrD,MAAO,QAEvD,IACE,MAAM+D,QAAeP,EAAWM,QAAQrE,iBACxCyD,EAAUc,IAAA,IACLA,EACHV,YAAaS,EAAOhE,QACpBC,MAAO+D,EAAOhE,QAAU,KAAOgE,EAAO/D,OAAS,sBAC/CqD,WAAW,IAEf,OAASrD,GACPkD,EAAUc,IAAA,IACLA,EACHV,aAAa,EACbtD,MAAOA,aAAiBK,MAAQL,EAAMM,QAAU,sBAChD+C,WAAW,IAEf,GACC,IAWH,OARAO,EAAAA,UAAU,IACD,KACDF,EAAmBI,SACrBJ,EAAmBI,QAAQM,SAG9B,IAEI,IACFnB,EACHnC,cACA4E,gBACAC,QACAC,cC1OEC,EAAsB,CAC1BC,aAAc,UACdC,WACE,2EACFC,aAAc,MACdC,gBAAiB,UACjBC,UAAW,UACXC,iBAAkB,UAClBC,YAAa,UACbC,iBAAkB,UAClBC,sBAAuB,WAGZC,EAAYC,IACvB,MAAMC,EAAQC,EAAAA,QACZ,KAAA,IACKb,KACAW,IAEL,CAACA,IAGGG,EAAeD,EAAAA,QACnB,KAAA,CAEI,gCAAiCD,EAAMX,aACvC,8BAA+BW,EAAMV,WACrC,gCAAiCU,EAAMT,aACvC,2BAA4BS,EAAMR,gBAClC,6BAA8BQ,EAAMP,UACpC,qCAAsCO,EAAMN,iBAC5C,+BAAgCM,EAAML,YACtC,qCAAsCK,EAAMJ,iBAC5C,0CAA2CI,EAAMH,wBAErD,CAACG,IAGH,MAAO,CAAEA,QAAOE,iBC7BLC,EAAwC,EACnDC,QACAC,WACAC,aACAC,UACA1D,eAAc,EACdD,aAAY,EACZ4D,wBAAuB,MAEvB,MAOMC,EANA7D,EACK,CAAErC,KAAM,gBAAiBmG,UAAW,uBACzC7D,EAAoB,CAAEtC,KAAM,SAAUmG,UAAW,sBAC9C,CAAEnG,KAAM,UAAWmG,UAAW,yBAKvC,aACG,SAAA,CAAOA,UAAU,uBAChBC,SAAAC,EAAAA,KAAC,MAAA,CAAIF,UAAU,0BACbC,SAAA,GAAAC,KAAC,MAAA,CAAIF,UAAU,uBACbC,SAAA,CAAAE,EAAAA,IAAC,KAAA,CAAGH,UAAU,sBAAuBC,SAAAP,IACpCC,KAAYQ,IAAC,IAAA,CAAEH,UAAU,yBAA0BC,SAAAN,IACnDG,GACCI,EAAAA,KAAC,MAAA,CAAIF,UAAU,6BACbC,SAAA,CAAAE,EAAAA,IAAC,MAAA,CACCH,UAAW,uBAAuBD,EAAiBC,cAErDG,EAAAA,IAAC,OAAA,CAAKH,UAAU,uBACbC,WAAiBpG,eAM1BqG,KAAC,MAAA,CAAIF,UAAU,0BACZC,SAAA,CAAAL,GACCO,EAAAA,IAAC,SAAA,CACCH,UAAU,kDACVI,QAASR,EACT,aAAW,gBACXzB,KAAK,SAEL8B,SAAAE,EAAAA,IAAC,MAAA,CACCE,QAAQ,YACRC,KAAK,OACLC,OAAO,eACPC,YAAY,IAEZP,SAAAE,EAAAA,IAAC,QAAKM,GAAG,IAAIC,GAAG,KAAKC,GAAG,KAAKC,GAAG,WAKrCf,GACCM,EAAAA,IAAC,SAAA,CACCH,UAAU,+CACVI,QAASP,EACT,aAAW,aACX1B,KAAK,SAEL8B,SAAAC,EAAAA,KAAC,MAAA,CACCG,QAAQ,YACRC,KAAK,OACLC,OAAO,eACPC,YAAY,IAEZP,SAAA,CAAAE,EAAAA,IAAC,OAAA,CAAKM,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,OAC/BT,EAAAA,IAAC,QAAKM,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKC,GAAG,qBCxElCC,EAA8C,EACzD1H,UACA2H,eAAc,EACdC,iBAAgB,YAEhB,MAAMC,EAA0B,SAAjB7H,EAAQwE,KAIvB,GAHkC,WAAjBxE,EAAQwE,KAGX,OAAO,KAErB,MAIMsD,EAAiB,CACrB,0BACAD,EAAS,wBAA0B,6BACnCF,EAAc,qBAAuB,IAEpCI,OAAOC,SACPC,KAAK,KAER,SACElB,KAAC,MAAA,CAAIF,UAAWiB,EACdhB,SAAA,GAAAC,KAAC,MAAA,CAAIF,UAAU,2BACbC,SAAA,GAAAC,KAAC,MAAA,CAAIF,UAAU,wBACZC,SAAA,CAAA9G,EAAQ4D,QACR+D,KAAeX,IAAC,OAAA,CAAKH,UAAU,kBAAkBC,SAAA,UAEnD,OAAAjG,EAAAb,EAAQ0E,eAAR,EAAA7D,EAAkBqE,kBACjB8B,EAAAA,IAAC,MAAA,CACCH,UAAU,yBACVN,MAAM,+BACPO,SAAA,mBAKJc,SACE,MAAA,CAAIf,UAAU,6BACZC,UA9BWoB,EA8BAlI,EAAQyE,UA7BnByD,EAAKC,mBAAmB,GAAI,CAAEC,KAAM,UAAWC,OAAQ,kBAD7C,IAACH,GCbTI,EAAoD,EAC/DtI,UAAU,oBACV6G,YAAY,MAGVE,EAAAA,KAAC,MAAA,CAAIF,UAAW,8BAA8BA,IAC5CC,SAAA,GAAAC,KAAC,MAAA,CAAIF,UAAU,wBACbC,SAAA,GAAAE,IAAC,MAAA,CAAIH,UAAU,mBACfG,IAAC,MAAA,CAAIH,UAAU,mBACfG,IAAC,MAAA,CAAIH,UAAU,oBAEjBG,EAAAA,IAAC,OAAA,CAAKH,UAAU,2BAA4BC,SAAA9G,OCJrCuI,EAA0C,EACrDzF,WACAC,YACArD,QACA8I,UACAC,kBAAiB,EACjBC,oBAAoB,yDAEpB,MAAMC,EAAiBxF,EAAAA,OAAuB,MACxCyF,EAAezF,EAAAA,OAAuB,MAW5CG,EAAAA,UAAU,KAER,MAAMuF,EAAYC,WAAW,KAVzBH,EAAenF,SACjBmF,EAAenF,QAAQuF,eAAe,CACpCC,SAAU,SACVC,MAAO,SASR,KAEH,MAAO,IAAMC,aAAaL,IACzB,CAAC/F,EAASqG,OAAQpG,IAGrB,MAAMqG,EAAkBtG,EAASiF,OAAQsB,GAAqB,WAAbA,EAAI7E,MAErD,OACEuC,EAAAA,KAAC,MAAA,CAAIF,UAAU,wBAAwByC,IAAKV,EAC1C9B,SAAA,GAAAC,KAAC,MAAA,CAAIF,UAAU,8BACZC,SAAA,CAA2B,IAA3BsC,EAAgBD,SAAiBpG,IAAcrD,GAC9CqH,EAAAA,KAAC,MAAA,CAAIF,UAAU,uBACbC,SAAA,CAAAE,EAAAA,IAAC,MAAA,CAAIH,UAAU,sBAAsBC,SAAA,OACrCE,EAAAA,IAAC,IAAA,CAAEH,UAAU,yBAA0BC,SAAA4B,OAI1CU,EAAgBG,IAAI,CAACvJ,EAASwJ,IAC7BxC,EAAAA,IAACU,EAAA,CAEC1H,UACA2H,YACE5E,GACiB,cAAjB/C,EAAQwE,MACRgF,IAAUJ,EAAgBD,OAAS,EAErCvB,cAAea,GAPVzI,EAAQiE,KAWhBlB,GACCqG,EAAgBD,OAAS,GAC6B,UAAtD,OAAAtI,EAAAuI,EAAgBA,EAAgBD,OAAS,SAAzC,EAAAtI,EAA6C2D,OAC3CwC,EAAAA,IAACsB,EAAA,CAAiBtI,QAAQ,wBAG7BN,GACCqH,EAAAA,KAAC,MAAA,CAAIF,UAAU,yBACbC,SAAA,GAAAC,KAAC,MAAA,CAAIF,UAAU,yBACbC,SAAA,CAAAE,EAAAA,IAAC,OAAA,CAAKH,UAAU,sBAAsBC,SAAA,OACtCE,EAAAA,IAAC,OAAA,CAAKH,UAAU,sBAAuBC,SAAApH,OAExC8I,GACCxB,EAAAA,IAAC,SAAA,CACCH,UAAU,wBACVI,QAASuB,EACTxD,KAAK,SACN8B,SAAA,kBAOTE,IAAC,MAAA,CAAIsC,IAAKX,QC7EHc,EAAsC,EACjDC,gBACAC,YAAW,EACXC,cAAc,uBACdC,YAAY,IACZC,kBAAiB,MAEjB,MAAO9J,EAAS+J,GAAclH,EAAAA,SAAS,IACjCmH,EAAc7G,EAAAA,OAA4B,MAC1C8G,EAAU9G,EAAAA,OAAwB,MAYxCG,EAAAA,UAAU,KAVmB,MAC3B,MAAM4G,EAAWF,EAAYxG,QAC7B,GAAI0G,EAAU,CACZA,EAASC,MAAMC,OAAS,OACxB,MAAMC,EAAeH,EAASG,aACxBC,EAAY,IAClBJ,EAASC,MAAMC,OAAShG,KAAKmG,IAAIF,EAAcC,GAAa,IAC9D,GAIAE,IACC,CAACxK,IAEJ,MAAMyK,EAAcxI,IACdA,GACFA,EAAEyI,iBAGJ,MAAMC,EAAiB3K,EAAQ2B,OAC3BgJ,IAAmBhB,GAAYgB,EAAexB,QAAUU,IAC1DH,EAAciB,GACdZ,EAAW,IAGPC,EAAYxG,UACdwG,EAAYxG,QAAQ2G,MAAMC,OAAS,UAwBnCQ,EACJ5K,EAAQ2B,OAAOwH,OAAS,IAAMQ,GAAY3J,EAAQmJ,QAAUU,EAE9D,OACE9C,EAAAA,KAAC,OAAA,CACCF,UAAU,gCACVgE,SAAUJ,EACVnB,IAAKW,EAELnD,SAAA,GAAAC,KAAC,MAAA,CAAIF,UAAU,yBACbC,SAAA,CAAAE,EAAAA,IAAC,WAAA,CACCsC,IAAKU,EACLnD,UAAU,yBACV1F,MAAOnB,EACP8K,SArBc7I,IACpB,MAAM8I,EAAW9I,EAAE+I,OAAO7J,MACtB4J,EAAS5B,QAAUU,GACrBE,EAAWgB,IAmBPE,UAlCehJ,UACP,UAAVA,EAAEiJ,KAAoBjJ,EAAEkJ,WAC1BlJ,EAAEyI,iBACFD,KAGY,WAAVxI,EAAEiJ,MACJnB,EAAW,IACX,OAAAlJ,EAAAmJ,EAAYxG,UAAZ3C,EAAqBuK,SA2BjBxB,YAAaD,EAAW,gBAAkBC,EAC1CD,WACA0B,KAAM,EACN,aAAW,wBAGbtE,KAAC,MAAA,CAAIF,UAAU,yBACZC,SAAA,CAAA+C,EAAY,GACX9C,EAAAA,KAAC,MAAA,CACCF,UAAW,0BACT7G,EAAQmJ,OAAqB,GAAZU,EAAkB,wBAA0B,IAG9D/C,SAAA,CAAA9G,EAAQmJ,OAAO,IAAEU,KAIrBC,GACC9C,EAAAA,IAAC,SAAA,CACChC,KAAK,SACL6B,UAAU,uBACV8C,UAAWiB,EACX,aAAW,eAEX9D,SAAAC,EAAAA,KAAC,MAAA,CACCG,QAAQ,YACRC,KAAK,OACLC,OAAO,eACPC,YAAY,IACZR,UAAU,qBACV,cAAY,OAEZC,SAAA,CAAAE,EAAAA,IAAC,OAAA,CAAKM,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,SAChCT,IAAC,UAAA,CAAQsE,OAAO,yCAO1BtE,EAAAA,IAAC,MAAA,CAAIH,UAAU,sBAAsBC,SAAA,oECtH9ByE,EAAwC,EACnDzM,SACA0M,UACArF,QACAI,QAAQ,eACRqD,cAAc,uBACdQ,SAAS,QACTqB,QAAQ,QACRC,WAAW,eACXC,aAAY,EACZ/G,mBAAkB,EAClBpC,eAAe,GACfqC,mBAAmB,IACnB+G,YACAC,UACAC,YACAC,yBAEA,MAAOC,EAAaC,GAAkBpJ,EAAAA,SAAS8I,IACxCO,EAAWC,GAAgBtJ,EAAAA,UAAU8I,IACrCS,EAAeC,GAAoBxJ,EAAAA,UAAS,GAE7CyJ,EAAc,CAClBd,QAASA,QAAW,EACpB5G,gBAAiBA,QAAmB,EACpCpC,aAAcA,QAAgB,EAC9BqC,iBAAkBA,QAAoB,EACtCF,OAAQ,QAAQT,KAAKC,UAGjBrB,SACJA,EAAAC,UACAA,EAAAC,YACAA,EAAAtD,MACAA,EAAAc,YACAA,EAAA6E,MACAA,EAAAC,UACAA,GACE7C,EAAQ3D,EAAQwN,IAEdjG,aAAEA,GAAiBJ,EAASE,GAGlC7C,EAAAA,UAAU,KACR,GAAIsI,GAAa9I,EAASqG,OAAS,EAAG,CACpC,MAAMoD,EAAgBzJ,EAASA,EAASqG,OAAS,GAE7CoD,GAAwC,cAAvBA,EAAc/H,MACjCoH,EAAUW,EAEd,GACC,CAACzJ,EAAU8I,IAGdtI,EAAAA,UAAU,KACJuI,GAAWnM,GACbmM,EAAQ,IAAI9L,MAAML,KAEnB,CAACA,EAAOmM,IAGXvI,EAAAA,UAAU,KACJN,GAAe8I,EACjBA,KACU9I,GAAeoJ,GAAiBL,GAC1CA,KAED,CAAC/I,EAAa8I,EAAWC,EAAcK,IAE1C,MAAMI,EAAiB7I,EAAAA,YAAY,KACjCsI,GAAgBD,IACf,CAACA,IAEES,EAAyB9I,EAAAA,YAAY,KACzCwI,GAAcD,GACTA,GACHD,GAAe,IAEhB,CAACC,IAEEQ,EAAoB/I,EAAAA,YACxBJ,MAAOK,IACLyI,GAAiB,SACX7L,EAAYoD,GAAS,IAE7B,CAACpD,IAGGmM,EAAchJ,EAAAA,YAAY,KAC9B0B,IACKrC,GACHsC,KAED,CAACD,EAAOC,EAAWtC,IAiCtB,OAnBAM,EAAAA,UAAU,KACR,MAAMsJ,EAAiB3K,IAErB,GAAc,WAAVA,EAAEiJ,KAAoBgB,IAAcF,EAAa,CACnD,MAAMa,EAAgBC,SAASD,cACzBE,EAAcD,SAASE,cAAc,0BAEvC,MAAAD,OAAA,EAAAA,EAAaE,SAASJ,KACxBZ,GAAe,EAEnB,GAGF,GAAIC,EAEF,OADAY,SAASI,iBAAiB,UAAWN,GAC9B,IAAME,SAASK,oBAAoB,UAAWP,IAEtD,CAACV,EAAWF,IAGbjF,EAAAA,KAAC,MAAA,CACCF,UAAW,kCAjCY,MACzB,OAAQ6E,GACN,IAAK,cACH,MAAO,gCACT,IAAK,SACH,MAAO,2BACT,QACE,MAAO,mCA0BoC0B,KAC7CjD,MAAO9D,EAGNS,SAAA,EAACoF,GACAnF,EAAAA,KAAC,SAAA,CACCF,UAAU,+BACVI,QAASwF,EACT,aAAY,QAAQlG,IACpBvB,KAAK,SAEL8B,SAAA,CAAAE,EAAAA,IAAC,MAAA,CACCE,QAAQ,YACRC,KAAK,OACLC,OAAO,eACPC,YAAY,IACZR,UAAU,qBACV,cAAY,OAEZC,SAAAE,EAAAA,IAAC,OAAA,CAAKqG,EAAE,+DAIRrK,GAAeoJ,GACfpF,EAAAA,IAAC,MAAA,CACCH,UAAU,8BACV,aAAW,mBACZC,SAAA,SAQNoF,GACCnF,EAAAA,KAAC,MAAA,CACCF,UAAW,yBACTmF,EAAc,qBAAuB,IAEvC7B,MAAO,CACLC,OAAQ4B,EAAc,OAAS5B,EAC/BqB,SAEFjH,KAAK,SACL,kBAAgB,sBAEhBsC,SAAA,CAAAE,EAAAA,IAACV,EAAA,CACCC,QACAC,SACE5B,EAAkB,oCAAiC,EAErD6B,WAAY+F,EACZ9F,QAAS+F,EACTzJ,cACAD,UAAWA,IAAcqJ,EACzBzF,qBAAsByF,KAGtBJ,GACAjF,EAAAA,KAAAuG,EAAAA,SAAA,CACExG,SAAA,CAAAE,EAAAA,IAACuB,EAAA,CACCzF,WACAC,YACArD,QACA8I,QAASmE,EACTjE,kBAAmB,gBAAgBnC,EAAMgH,kBACvC3I,EACI,uEACA,gCAIRoC,EAAAA,IAACyC,EAAA,CACCC,cAAegD,EACf/C,SAAU5G,IAAeC,GAAeoJ,EACxCxC,aACG5G,GAAeoJ,EACZ,kBACAxC,EAENC,UAAW,MAIO,oBAAZ2D,SACoB,iBAA1B,OAAA3M,UAAQ4M,UAAR,EAAA5M,EAAa6M,WACX1G,EAAAA,IAAC,MAAA,CAAIH,UAAU,sBACbC,WAAAC,KAAC,QAAA,CAAMD,SAAA,CAAA,cACO9D,EAAc,IAAM,IAAI,cAAY,IAC/C4B,EAAkB,IAAM,IAAI,eAAa,IACzC9B,EAASqG"}