{"version":3,"file":"index.esm.js","sources":["../src/services/chatApi.ts","../src/hooks/useChat.ts","../src/hooks/useTheme.ts","../src/components/ChatHeader.tsx","../src/components/MessageBubble.tsx","../src/components/LoadingIndicator.tsx","../src/components/MessageList.tsx","../src/components/ChatInput.tsx","../src/ChatWidget.tsx"],"sourcesContent":["// src/services/chatApi.ts\r\nimport { ChatApiRequest, ApiChatResponse, StreamChunk } from \"../types\";\r\n\r\nexport class ChatApiService {\r\n  private apiUrl: string;\r\n  private defaultHeaders: HeadersInit;\r\n\r\n  constructor(apiUrl: string) {\r\n    // Remove trailing slash to match your existing API structure\r\n    this.apiUrl = apiUrl.replace(/\\/$/, \"\");\r\n    this.defaultHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n  }\r\n\r\n  // Test connection to the API\r\n  async testConnection(): Promise<{ success: boolean; error?: string }> {\r\n    try {\r\n      const response = await fetch(`${this.apiUrl}/health`, {\r\n        method: \"GET\",\r\n        headers: this.defaultHeaders,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        return {\r\n          success: false,\r\n          error: `Health check failed: ${response.status} ${response.statusText}`,\r\n        };\r\n      }\r\n\r\n      const health = await response.json();\r\n      return {\r\n        success: health.status === \"healthy\" || health.status === \"degraded\",\r\n        error: health.status !== \"healthy\" ? health.error : undefined,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Connection failed\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Send streaming chat message (matches your /api/chat endpoint)\r\n  async sendStreamingMessage(request: ChatApiRequest): Promise<Response> {\r\n    const response = await fetch(`${this.apiUrl}/api/chat`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        ...this.defaultHeaders,\r\n        Accept: \"text/event-stream\",\r\n      },\r\n      body: JSON.stringify({\r\n        ...request,\r\n        stream: true, // Force streaming\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  // Send non-streaming chat message\r\n  async sendMessage(request: ChatApiRequest): Promise<ApiChatResponse> {\r\n    const response = await fetch(`${this.apiUrl}/api/chat`, {\r\n      method: \"POST\",\r\n      headers: this.defaultHeaders,\r\n      body: JSON.stringify({\r\n        ...request,\r\n        stream: false,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  // Process Server-Sent Events stream (matches your streaming format)\r\n  async *processStreamingResponse(\r\n    response: Response\r\n  ): AsyncGenerator<StreamChunk, void, unknown> {\r\n    const reader = response.body?.getReader();\r\n    const decoder = new TextDecoder();\r\n\r\n    if (!reader) {\r\n      throw new Error(\"No response body reader available\");\r\n    }\r\n\r\n    try {\r\n      let buffer = \"\";\r\n\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n\r\n        if (done) break;\r\n\r\n        buffer += decoder.decode(value, { stream: true });\r\n        const lines = buffer.split(\"\\n\");\r\n\r\n        // Keep the last incomplete line in the buffer\r\n        buffer = lines.pop() || \"\";\r\n\r\n        for (const line of lines) {\r\n          const trimmedLine = line.trim();\r\n\r\n          if (trimmedLine.startsWith(\"data: \")) {\r\n            const data = trimmedLine.slice(6);\r\n\r\n            if (data === \"[DONE]\") {\r\n              return;\r\n            }\r\n\r\n            try {\r\n              const parsed: StreamChunk = JSON.parse(data);\r\n              yield parsed;\r\n            } catch (e) {\r\n              console.warn(\"Failed to parse SSE data:\", data, e);\r\n              // Continue processing other chunks\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n    }\r\n  }\r\n\r\n  // Get available models (matches your /api/chat/models endpoint)\r\n  async getAvailableModels(): Promise<{\r\n    models: string[];\r\n    current: { name: string; description: string; maxTokens: number };\r\n    features: Record<string, boolean>;\r\n  }> {\r\n    const response = await fetch(`${this.apiUrl}/api/chat/models`, {\r\n      method: \"GET\",\r\n      headers: this.defaultHeaders,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch models: ${response.status}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  // Test the API connection (matches your /api/chat/test endpoint)\r\n  async testChat(): Promise<{ success: boolean; message: string }> {\r\n    try {\r\n      const response = await fetch(`${this.apiUrl}/api/chat/test`, {\r\n        method: \"GET\",\r\n        headers: this.defaultHeaders,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        return { success: false, message: `Test failed: ${response.status}` };\r\n      }\r\n\r\n      const result = await response.json();\r\n      return {\r\n        success: true,\r\n        message: result.message || \"Test successful\",\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error instanceof Error ? error.message : \"Test failed\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get content types (if Contentstack is enabled)\r\n  async getContentTypes(): Promise<string[]> {\r\n    try {\r\n      const response = await fetch(`${this.apiUrl}/api/chat/content-types`, {\r\n        method: \"GET\",\r\n        headers: this.defaultHeaders,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        return [];\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result.contentTypes || [];\r\n    } catch (error) {\r\n      console.warn(\"Failed to fetch content types:\", error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n","// src/hooks/useChat.ts\r\nimport { useState, useCallback, useRef, useEffect } from \"react\";\r\nimport { ChatState, Message, ChatApiRequest } from \"../types\";\r\nimport { ChatApiService } from \"../services/chatApi\";\r\n\r\nexport const useChat = (\r\n  apiUrl: string,\r\n  options?: {\r\n    agentId?: string | undefined;\r\n    useContentstack?: boolean | undefined;\r\n    contentTypes?: string[] | undefined;\r\n    maxContextLength?: number | undefined;\r\n    userId?: string | undefined;\r\n  }\r\n) => {\r\n  const [state, setState] = useState<ChatState>({\r\n    messages: [],\r\n    isLoading: false,\r\n    isConnected: false,\r\n    error: null,\r\n    conversationId: null,\r\n  });\r\n\r\n  const chatApiRef = useRef(new ChatApiService(apiUrl));\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n  const connectionTestedRef = useRef(false);\r\n\r\n  // Test connection on mount\r\n  useEffect(() => {\r\n    const testConnection = async () => {\r\n      if (connectionTestedRef.current) return;\r\n\r\n      try {\r\n        connectionTestedRef.current = true;\r\n        const result = await chatApiRef.current.testConnection();\r\n\r\n        setState((prev) => ({\r\n          ...prev,\r\n          isConnected: result.success,\r\n          error: result.success ? null : result.error || \"Connection failed\",\r\n        }));\r\n      } catch (error) {\r\n        setState((prev) => ({\r\n          ...prev,\r\n          isConnected: false,\r\n          error:\r\n            error instanceof Error ? error.message : \"Connection test failed\",\r\n        }));\r\n      }\r\n    };\r\n\r\n    testConnection();\r\n  }, []);\r\n\r\n  const sendMessage = useCallback(\r\n    async (content: string, streaming: boolean = true) => {\r\n      // Cancel any ongoing request\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n\r\n      abortControllerRef.current = new AbortController();\r\n\r\n      const userMessage: Message = {\r\n        id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n        content,\r\n        role: \"user\",\r\n        timestamp: new Date(),\r\n        metadata: options?.userId\r\n          ? {\r\n              userId: options.userId,\r\n            }\r\n          : undefined,\r\n      };\r\n\r\n      // Add user message\r\n      setState((prev) => ({\r\n        ...prev,\r\n        messages: [...prev.messages, userMessage],\r\n        isLoading: true,\r\n        error: null,\r\n      }));\r\n\r\n      try {\r\n        const request: ChatApiRequest = {\r\n          message: content,\r\n          conversationId: state.conversationId || undefined,\r\n          userId: options?.userId || undefined,\r\n          stream: streaming,\r\n          useContentstack: options?.useContentstack || undefined,\r\n          contentTypes: options?.contentTypes || undefined,\r\n          maxContextLength: options?.maxContextLength || undefined,\r\n        };\r\n\r\n        if (streaming) {\r\n          // Handle streaming response\r\n          const response = await chatApiRef.current.sendStreamingMessage(\r\n            request\r\n          );\r\n\r\n          let assistantMessage: Message = {\r\n            id: `assistant-${Date.now()}-${Math.random()\r\n              .toString(36)\r\n              .substr(2, 9)}`,\r\n            content: \"\",\r\n            role: \"assistant\",\r\n            timestamp: new Date(),\r\n            metadata: {},\r\n          };\r\n\r\n          // Add assistant message placeholder\r\n          setState((prev) => ({\r\n            ...prev,\r\n            messages: [...prev.messages, assistantMessage],\r\n            isConnected: true,\r\n          }));\r\n\r\n          // Process streaming chunks\r\n          for await (const chunk of chatApiRef.current.processStreamingResponse(\r\n            response\r\n          )) {\r\n            if (chunk.type === \"content\" && chunk.content) {\r\n              assistantMessage = {\r\n                ...assistantMessage,\r\n                content: assistantMessage.content + chunk.content,\r\n              };\r\n\r\n              setState((prev) => ({\r\n                ...prev,\r\n                messages: [...prev.messages.slice(0, -1), assistantMessage],\r\n              }));\r\n            } else if (chunk.type === \"done\") {\r\n              // Final update with complete content\r\n              if (chunk.metadata.fullContent) {\r\n                assistantMessage = {\r\n                  ...assistantMessage,\r\n                  content: chunk.metadata.fullContent,\r\n                  timestamp: new Date(chunk.metadata.timestamp),\r\n                };\r\n\r\n                setState((prev) => ({\r\n                  ...prev,\r\n                  messages: [...prev.messages.slice(0, -1), assistantMessage],\r\n                  conversationId: prev.conversationId || `conv-${Date.now()}`,\r\n                }));\r\n              }\r\n              break;\r\n            } else if (chunk.type === \"error\") {\r\n              throw new Error(chunk.error || \"Streaming error occurred\");\r\n            }\r\n          }\r\n        } else {\r\n          // Handle non-streaming response\r\n          const response = await chatApiRef.current.sendMessage(request);\r\n\r\n          const assistantMessage: Message = {\r\n            id: response.message.id,\r\n            content: response.message.content,\r\n            role: response.message.role,\r\n            timestamp: new Date(response.message.timestamp),\r\n            metadata: {\r\n              contentEnhanced: response.enhancedWithContent,\r\n            },\r\n          };\r\n\r\n          setState((prev) => ({\r\n            ...prev,\r\n            messages: [...prev.messages, assistantMessage],\r\n            conversationId: response.conversationId,\r\n            isConnected: true,\r\n          }));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Chat error:\", error);\r\n        setState((prev) => ({\r\n          ...prev,\r\n          error:\r\n            error instanceof Error\r\n              ? error.message\r\n              : \"An error occurred while sending the message\",\r\n          isConnected: false,\r\n        }));\r\n      } finally {\r\n        setState((prev) => ({ ...prev, isLoading: false }));\r\n        abortControllerRef.current = null;\r\n      }\r\n    },\r\n    [options, state.conversationId]\r\n  );\r\n\r\n  const clearMessages = useCallback(() => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      messages: [],\r\n      conversationId: null,\r\n      error: null,\r\n    }));\r\n  }, []);\r\n\r\n  const retry = useCallback(() => {\r\n    setState((prev) => ({ ...prev, error: null }));\r\n  }, []);\r\n\r\n  const reconnect = useCallback(async () => {\r\n    setState((prev) => ({ ...prev, isLoading: true, error: null }));\r\n\r\n    try {\r\n      const result = await chatApiRef.current.testConnection();\r\n      setState((prev) => ({\r\n        ...prev,\r\n        isConnected: result.success,\r\n        error: result.success ? null : result.error || \"Reconnection failed\",\r\n        isLoading: false,\r\n      }));\r\n    } catch (error) {\r\n      setState((prev) => ({\r\n        ...prev,\r\n        isConnected: false,\r\n        error: error instanceof Error ? error.message : \"Reconnection failed\",\r\n        isLoading: false,\r\n      }));\r\n    }\r\n  }, []);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    ...state,\r\n    sendMessage,\r\n    clearMessages,\r\n    retry,\r\n    reconnect,\r\n  };\r\n};\r\n","// src/hooks/useTheme.ts\r\nimport { useMemo } from \"react\";\r\nimport { Theme } from \"../types\";\r\n\r\nconst defaultTheme: Theme = {\r\n  primaryColor: \"#007bff\",\r\n  fontFamily:\r\n    'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\r\n  borderRadius: \"8px\",\r\n  backgroundColor: \"#ffffff\",\r\n  textColor: \"#333333\",\r\n  inputBorderColor: \"#e1e5e9\",\r\n  headerColor: \"#007bff\",\r\n  userMessageColor: \"#007bff\",\r\n  assistantMessageColor: \"#f8f9fa\",\r\n};\r\n\r\nexport const useTheme = (customTheme?: Partial<Theme>) => {\r\n  const theme = useMemo(\r\n    () => ({\r\n      ...defaultTheme,\r\n      ...customTheme,\r\n    }),\r\n    [customTheme]\r\n  );\r\n\r\n  const cssVariables = useMemo(\r\n    () =>\r\n      ({\r\n        \"--techsurf-chat-primary-color\": theme.primaryColor,\r\n        \"--techsurf-chat-font-family\": theme.fontFamily,\r\n        \"--techsurf-chat-border-radius\": theme.borderRadius,\r\n        \"--techsurf-chat-bg-color\": theme.backgroundColor,\r\n        \"--techsurf-chat-text-color\": theme.textColor,\r\n        \"--techsurf-chat-input-border-color\": theme.inputBorderColor,\r\n        \"--techsurf-chat-header-color\": theme.headerColor,\r\n        \"--techsurf-chat-user-message-color\": theme.userMessageColor,\r\n        \"--techsurf-chat-assistant-message-color\": theme.assistantMessageColor,\r\n      } as React.CSSProperties),\r\n    [theme]\r\n  );\r\n\r\n  return { theme, cssVariables };\r\n};\r\n","// src/components/ChatHeader.tsx\r\nimport React from \"react\";\r\n\r\ninterface ChatHeaderProps {\r\n  title: string;\r\n  subtitle?: string | undefined;\r\n  onMinimize?: (() => void) | undefined;\r\n  onClose?: (() => void) | undefined;\r\n  isConnected?: boolean | undefined;\r\n  isLoading?: boolean | undefined;\r\n  showConnectionStatus?: boolean | undefined;\r\n}\r\n\r\nexport const ChatHeader: React.FC<ChatHeaderProps> = ({\r\n  title,\r\n  subtitle,\r\n  onMinimize,\r\n  onClose,\r\n  isConnected = false,\r\n  isLoading = false,\r\n  showConnectionStatus = true,\r\n}) => {\r\n  const getConnectionStatus = () => {\r\n    if (isLoading)\r\n      return { text: \"Connecting...\", className: \"techsurf-connecting\" };\r\n    if (isConnected) return { text: \"Online\", className: \"techsurf-connected\" };\r\n    return { text: \"Offline\", className: \"techsurf-disconnected\" };\r\n  };\r\n\r\n  const connectionStatus = getConnectionStatus();\r\n\r\n  return (\r\n    <header className=\"techsurf-chat-header\">\r\n      <div className=\"techsurf-header-content\">\r\n        <div className=\"techsurf-header-info\">\r\n          <h3 className=\"techsurf-chat-title\">{title}</h3>\r\n          {subtitle && <p className=\"techsurf-chat-subtitle\">{subtitle}</p>}\r\n          {showConnectionStatus && (\r\n            <div className=\"techsurf-connection-status\">\r\n              <div\r\n                className={`techsurf-status-dot ${connectionStatus.className}`}\r\n              />\r\n              <span className=\"techsurf-status-text\">\r\n                {connectionStatus.text}\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"techsurf-header-actions\">\r\n          {onMinimize && (\r\n            <button\r\n              className=\"techsurf-header-button techsurf-minimize-button\"\r\n              onClick={onMinimize}\r\n              aria-label=\"Minimize chat\"\r\n              type=\"button\"\r\n            >\r\n              <svg\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"2\"\r\n              >\r\n                <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n              </svg>\r\n            </button>\r\n          )}\r\n\r\n          {onClose && (\r\n            <button\r\n              className=\"techsurf-header-button techsurf-close-button\"\r\n              onClick={onClose}\r\n              aria-label=\"Close chat\"\r\n              type=\"button\"\r\n            >\r\n              <svg\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"2\"\r\n              >\r\n                <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n                <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n              </svg>\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","// src/components/MessageBubble.tsx\r\nimport React from \"react\";\r\nimport { Message } from \"../types\";\r\n\r\ninterface MessageBubbleProps {\r\n  message: Message;\r\n  isStreaming?: boolean;\r\n  showTimestamp?: boolean;\r\n}\r\n\r\nexport const MessageBubble: React.FC<MessageBubbleProps> = ({\r\n  message,\r\n  isStreaming = false,\r\n  showTimestamp = true,\r\n}) => {\r\n  const isUser = message.role === \"user\";\r\n  const isSystem = message.role === \"system\";\r\n\r\n  // Don't render system messages in the UI\r\n  if (isSystem) return null;\r\n\r\n  const formatTime = (date: Date) => {\r\n    return date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" });\r\n  };\r\n\r\n  const messageClasses = [\r\n    \"techsurf-message-bubble\",\r\n    isUser ? \"techsurf-user-message\" : \"techsurf-assistant-message\",\r\n    isStreaming ? \"techsurf-streaming\" : \"\",\r\n  ]\r\n    .filter(Boolean)\r\n    .join(\" \");\r\n\r\n  return (\r\n    <div className={messageClasses}>\r\n      <div className=\"techsurf-message-content\">\r\n        <div className=\"techsurf-message-text\">\r\n          {message.content}\r\n          {isStreaming && <span className=\"techsurf-cursor\">|</span>}\r\n        </div>\r\n        {message.metadata?.contentEnhanced && (\r\n          <div\r\n            className=\"techsurf-content-badge\"\r\n            title=\"Enhanced with knowledge base\"\r\n          >\r\n            🧠 Enhanced\r\n          </div>\r\n        )}\r\n      </div>\r\n      {showTimestamp && (\r\n        <div className=\"techsurf-message-timestamp\">\r\n          {formatTime(message.timestamp)}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","// src/components/LoadingIndicator.tsx\r\nimport React from \"react\";\r\n\r\ninterface LoadingIndicatorProps {\r\n  message?: string;\r\n  className?: string;\r\n}\r\n\r\nexport const LoadingIndicator: React.FC<LoadingIndicatorProps> = ({\r\n  message = \"AI is thinking...\",\r\n  className = \"\",\r\n}) => {\r\n  return (\r\n    <div className={`techsurf-loading-indicator ${className}`}>\r\n      <div className=\"techsurf-loading-dots\">\r\n        <div className=\"techsurf-dot\"></div>\r\n        <div className=\"techsurf-dot\"></div>\r\n        <div className=\"techsurf-dot\"></div>\r\n      </div>\r\n      <span className=\"techsurf-loading-message\">{message}</span>\r\n    </div>\r\n  );\r\n};\r\n","// src/components/MessageList.tsx\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport { Message } from \"../types\";\r\nimport { MessageBubble } from \"./MessageBubble\";\r\nimport { LoadingIndicator } from \"./LoadingIndicator\";\r\n\r\ninterface MessageListProps {\r\n  messages: Message[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  onRetry?: () => void;\r\n  showTimestamps?: boolean;\r\n  emptyStateMessage?: string;\r\n}\r\n\r\nexport const MessageList: React.FC<MessageListProps> = ({\r\n  messages,\r\n  isLoading,\r\n  error,\r\n  onRetry,\r\n  showTimestamps = true,\r\n  emptyStateMessage = \"Start a conversation with your AI assistant!\",\r\n}) => {\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Scroll to bottom when new messages arrive or loading state changes\r\n    const timeoutId = setTimeout(() => {\r\n      scrollToBottom();\r\n    }, 100);\r\n\r\n    return () => clearTimeout(timeoutId);\r\n  }, [messages.length, isLoading]);\r\n\r\n  // Filter out system messages for display\r\n  const displayMessages = messages.filter((msg) => msg.role !== \"system\");\r\n\r\n  return (\r\n    <div className=\"techsurf-message-list\" ref={containerRef}>\r\n      <div className=\"techsurf-messages-container\">\r\n        {displayMessages.length === 0 && !isLoading && !error && (\r\n          <div className=\"techsurf-empty-state\">\r\n            <div className=\"techsurf-empty-icon\">💬</div>\r\n            <p className=\"techsurf-empty-message\">{emptyStateMessage}</p>\r\n          </div>\r\n        )}\r\n\r\n        {displayMessages.map((message, index) => (\r\n          <MessageBubble\r\n            key={message.id}\r\n            message={message}\r\n            isStreaming={\r\n              isLoading &&\r\n              message.role === \"assistant\" &&\r\n              index === displayMessages.length - 1\r\n            }\r\n            showTimestamp={showTimestamps}\r\n          />\r\n        ))}\r\n\r\n        {isLoading &&\r\n          displayMessages.length > 0 &&\r\n          displayMessages[displayMessages.length - 1]?.role === \"user\" && (\r\n            <LoadingIndicator message=\"AI is responding...\" />\r\n          )}\r\n\r\n        {error && (\r\n          <div className=\"techsurf-error-message\">\r\n            <div className=\"techsurf-error-content\">\r\n              <span className=\"techsurf-error-icon\">⚠️</span>\r\n              <span className=\"techsurf-error-text\">{error}</span>\r\n            </div>\r\n            {onRetry && (\r\n              <button\r\n                className=\"techsurf-retry-button\"\r\n                onClick={onRetry}\r\n                type=\"button\"\r\n              >\r\n                Retry\r\n              </button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div ref={messagesEndRef} />\r\n    </div>\r\n  );\r\n};\r\n","// src/components/ChatInput.tsx\r\nimport React, {\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  KeyboardEvent,\r\n  FormEvent,\r\n} from \"react\";\r\n\r\ninterface ChatInputProps {\r\n  onSendMessage: (message: string) => void;\r\n  disabled?: boolean;\r\n  placeholder?: string;\r\n  maxLength?: number;\r\n  showSendButton?: boolean;\r\n}\r\n\r\nexport const ChatInput: React.FC<ChatInputProps> = ({\r\n  onSendMessage,\r\n  disabled = false,\r\n  placeholder = \"Type your message...\",\r\n  maxLength = 2000,\r\n  showSendButton = true,\r\n}) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  const formRef = useRef<HTMLFormElement>(null);\r\n\r\n  const adjustTextareaHeight = () => {\r\n    const textarea = textareaRef.current;\r\n    if (textarea) {\r\n      textarea.style.height = \"auto\";\r\n      const scrollHeight = textarea.scrollHeight;\r\n      const maxHeight = 120; // Maximum height in pixels\r\n      textarea.style.height = Math.min(scrollHeight, maxHeight) + \"px\";\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    adjustTextareaHeight();\r\n  }, [message]);\r\n\r\n  const handleSend = (e?: FormEvent) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    const trimmedMessage = message.trim();\r\n    if (trimmedMessage && !disabled && trimmedMessage.length <= maxLength) {\r\n      onSendMessage(trimmedMessage);\r\n      setMessage(\"\");\r\n\r\n      // Reset textarea height\r\n      if (textareaRef.current) {\r\n        textareaRef.current.style.height = \"auto\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSend();\r\n    }\r\n\r\n    if (e.key === \"Escape\") {\r\n      setMessage(\"\");\r\n      textareaRef.current?.blur();\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const newValue = e.target.value;\r\n    if (newValue.length <= maxLength) {\r\n      setMessage(newValue);\r\n    }\r\n  };\r\n\r\n  const canSend =\r\n    message.trim().length > 0 && !disabled && message.length <= maxLength;\r\n\r\n  return (\r\n    <form\r\n      className=\"techsurf-chat-input-container\"\r\n      onSubmit={handleSend}\r\n      ref={formRef}\r\n    >\r\n      <div className=\"techsurf-input-wrapper\">\r\n        <textarea\r\n          ref={textareaRef}\r\n          className=\"techsurf-message-input\"\r\n          value={message}\r\n          onChange={handleChange}\r\n          onKeyDown={handleKeyDown}\r\n          placeholder={disabled ? \"Connecting...\" : placeholder}\r\n          disabled={disabled}\r\n          rows={1}\r\n          aria-label=\"Type your message\"\r\n        />\r\n\r\n        <div className=\"techsurf-input-actions\">\r\n          {maxLength > 0 && (\r\n            <div\r\n              className={`techsurf-char-counter ${\r\n                message.length > maxLength * 0.9 ? \"techsurf-char-warning\" : \"\"\r\n              }`}\r\n            >\r\n              {message.length}/{maxLength}\r\n            </div>\r\n          )}\r\n\r\n          {showSendButton && (\r\n            <button\r\n              type=\"submit\"\r\n              className=\"techsurf-send-button\"\r\n              disabled={!canSend}\r\n              aria-label=\"Send message\"\r\n            >\r\n              <svg\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"2\"\r\n                className=\"techsurf-send-icon\"\r\n                aria-hidden=\"true\"\r\n              >\r\n                <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\" />\r\n                <polygon points=\"22,2 15,22 11,13 2,9 22,2\" />\r\n              </svg>\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"techsurf-input-hint\">\r\n        Press Enter to send, Shift+Enter for new line, Esc to clear\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n","// src/ChatWidget.tsx\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { ChatWidgetProps } from \"./types\";\r\nimport { useChat } from \"./hooks/useChat\";\r\nimport { useTheme } from \"./hooks/useTheme\";\r\nimport { ChatHeader } from \"./components/ChatHeader\";\r\nimport { MessageList } from \"./components/MessageList\";\r\nimport { ChatInput } from \"./components/ChatInput\";\r\n\r\n// Declare process for environment check\r\ndeclare const process: {\r\n  env: {\r\n    NODE_ENV: string;\r\n  };\r\n};\r\n\r\nexport const ChatWidget: React.FC<ChatWidgetProps> = ({\r\n  apiUrl,\r\n  agentId,\r\n  theme,\r\n  title = \"AI Assistant\",\r\n  placeholder = \"Type your message...\",\r\n  height = \"500px\",\r\n  width = \"380px\",\r\n  position = \"bottom-right\",\r\n  minimized = false,\r\n  useContentstack = true,\r\n  contentTypes = [],\r\n  maxContextLength = 2000,\r\n  onMessage,\r\n  onError,\r\n  onConnect,\r\n  onDisconnect,\r\n}) => {\r\n  const [isMinimized, setIsMinimized] = useState(minimized);\r\n  const [isVisible, setIsVisible] = useState(!minimized);\r\n  const [hasInteracted, setHasInteracted] = useState(false);\r\n\r\n  const chatOptions = {\r\n    agentId: agentId || undefined,\r\n    useContentstack: useContentstack || undefined,\r\n    contentTypes: contentTypes || undefined,\r\n    maxContextLength: maxContextLength || undefined,\r\n    userId: `user-${Date.now()}`, // Simple user ID generation\r\n  };\r\n\r\n  const {\r\n    messages,\r\n    isLoading,\r\n    isConnected,\r\n    error,\r\n    sendMessage,\r\n    retry,\r\n    reconnect,\r\n  } = useChat(apiUrl, chatOptions);\r\n\r\n  const { cssVariables } = useTheme(theme);\r\n\r\n  // Handle message callback\r\n  useEffect(() => {\r\n    if (onMessage && messages.length > 0) {\r\n      const latestMessage = messages[messages.length - 1];\r\n      // Only call for assistant messages to avoid echoing user input\r\n      if (latestMessage && latestMessage.role === \"assistant\") {\r\n        onMessage(latestMessage);\r\n      }\r\n    }\r\n  }, [messages, onMessage]);\r\n\r\n  // Handle error callback\r\n  useEffect(() => {\r\n    if (onError && error) {\r\n      onError(new Error(error));\r\n    }\r\n  }, [error, onError]);\r\n\r\n  // Handle connection callbacks\r\n  useEffect(() => {\r\n    if (isConnected && onConnect) {\r\n      onConnect();\r\n    } else if (!isConnected && hasInteracted && onDisconnect) {\r\n      onDisconnect();\r\n    }\r\n  }, [isConnected, onConnect, onDisconnect, hasInteracted]);\r\n\r\n  const handleMinimize = useCallback(() => {\r\n    setIsMinimized(!isMinimized);\r\n  }, [isMinimized]);\r\n\r\n  const handleToggleVisibility = useCallback(() => {\r\n    setIsVisible(!isVisible);\r\n    if (!isVisible) {\r\n      setIsMinimized(false);\r\n    }\r\n  }, [isVisible]);\r\n\r\n  const handleSendMessage = useCallback(\r\n    async (content: string) => {\r\n      setHasInteracted(true);\r\n      await sendMessage(content, true); // Always use streaming\r\n    },\r\n    [sendMessage]\r\n  );\r\n\r\n  const handleRetry = useCallback(() => {\r\n    retry();\r\n    if (!isConnected) {\r\n      reconnect();\r\n    }\r\n  }, [retry, reconnect, isConnected]);\r\n\r\n  const getPositionClasses = () => {\r\n    switch (position) {\r\n      case \"bottom-left\":\r\n        return \"techsurf-position-bottom-left\";\r\n      case \"center\":\r\n        return \"techsurf-position-center\";\r\n      default:\r\n        return \"techsurf-position-bottom-right\";\r\n    }\r\n  };\r\n\r\n  // Handle keyboard shortcuts\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      // ESC to minimize (only when chat is focused)\r\n      if (e.key === \"Escape\" && isVisible && !isMinimized) {\r\n        const activeElement = document.activeElement;\r\n        const chatElement = document.querySelector(\".techsurf-chat-widget\");\r\n\r\n        if (chatElement?.contains(activeElement)) {\r\n          setIsMinimized(true);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (isVisible) {\r\n      document.addEventListener(\"keydown\", handleKeyDown);\r\n      return () => document.removeEventListener(\"keydown\", handleKeyDown);\r\n    }\r\n  }, [isVisible, isMinimized]);\r\n\r\n  return (\r\n    <div\r\n      className={`techsurf-chat-widget-container ${getPositionClasses()}`}\r\n      style={cssVariables}\r\n    >\r\n      {/* Chat Trigger Button */}\r\n      {!isVisible && (\r\n        <button\r\n          className=\"techsurf-chat-trigger-button\"\r\n          onClick={handleToggleVisibility}\r\n          aria-label={`Open ${title}`}\r\n          type=\"button\"\r\n        >\r\n          <svg\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"2\"\r\n            className=\"techsurf-chat-icon\"\r\n            aria-hidden=\"true\"\r\n          >\r\n            <path d=\"21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z\" />\r\n          </svg>\r\n\r\n          {/* Notification badge for connection issues */}\r\n          {!isConnected && hasInteracted && (\r\n            <div\r\n              className=\"techsurf-notification-badge\"\r\n              aria-label=\"Connection issue\"\r\n            >\r\n              !\r\n            </div>\r\n          )}\r\n        </button>\r\n      )}\r\n\r\n      {/* Chat Widget */}\r\n      {isVisible && (\r\n        <div\r\n          className={`techsurf-chat-widget ${\r\n            isMinimized ? \"techsurf-minimized\" : \"\"\r\n          }`}\r\n          style={{\r\n            height: isMinimized ? \"auto\" : height,\r\n            width: width,\r\n          }}\r\n          role=\"dialog\"\r\n          aria-labelledby=\"techsurf-chat-title\"\r\n        >\r\n          <ChatHeader\r\n            title={title}\r\n            subtitle={\r\n              useContentstack ? \"Enhanced with knowledge base\" : undefined\r\n            }\r\n            onMinimize={handleMinimize}\r\n            onClose={handleToggleVisibility}\r\n            isConnected={isConnected}\r\n            isLoading={isLoading && !hasInteracted}\r\n            showConnectionStatus={hasInteracted}\r\n          />\r\n\r\n          {!isMinimized && (\r\n            <>\r\n              <MessageList\r\n                messages={messages}\r\n                isLoading={isLoading}\r\n                error={error}\r\n                onRetry={handleRetry}\r\n                emptyStateMessage={`Hi! I'm your ${title.toLowerCase()}. ${\r\n                  useContentstack\r\n                    ? \"I have access to our knowledge base to provide accurate information.\"\r\n                    : \"How can I help you today?\"\r\n                }`}\r\n              />\r\n\r\n              <ChatInput\r\n                onSendMessage={handleSendMessage}\r\n                disabled={isLoading || (!isConnected && hasInteracted)}\r\n                placeholder={\r\n                  !isConnected && hasInteracted\r\n                    ? \"Reconnecting...\"\r\n                    : placeholder\r\n                }\r\n                maxLength={2000}\r\n              />\r\n\r\n              {/* Debug info in development */}\r\n              {typeof process !== \"undefined\" &&\r\n                process.env?.NODE_ENV === \"development\" && (\r\n                  <div className=\"techsurf-debug-info\">\r\n                    <small>\r\n                      Connected: {isConnected ? \"✓\" : \"✗\"} | Content:{\" \"}\r\n                      {useContentstack ? \"✓\" : \"✗\"} | Messages:{\" \"}\r\n                      {messages.length}\r\n                    </small>\r\n                  </div>\r\n                )}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Default export for easier importing\r\nexport default ChatWidget;\r\n"],"names":[],"mappings":"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"}